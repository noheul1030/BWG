4. 자료구조
	- 힙 
		- 최대값 혹은 최소값을 빠르게 찾기 위한 이진트리
		- 최소힙 : 부모는 자식보다 작아야한다.
		- 최대힙 : 부모는 자식보다 커야한다.
		- 높이만큼 시간복잡도가 걸리며 lgN의 시간복잡도를 가진다.
		- 힙의 삽입과 삭제는 O(lgN)만큼의 시간복잡도를 갖습니다.
	
	- 이진 탐색 트리 
		- 왼쪽 자식은 부모보다 작고, 오른쪽 자식은 부모보다 큰 이진 트리
		- 이진 탐색 트리는 삽입, 검색, 삭제가 모두 이진트리의 높이만큼 시간복잡도가 걸리며 lgN~N만큼의 시간복잡도를 가진다.
		- 그래서 트리가 편향되지 않기 위해서 자가 균형 트리를 사용합니다.
	
	- 자가 균형 트리 
		- 편향되지 않게 삽입, 삭제를 개선한 이진 탐색 트리
		- 트리를 전체적으로 재배치 해주는 방법
		- AVL, Red Black
		- 이진 탐색 트리는 시간복잡도가 트리의 높이에 따라 결정되므로 편향될 경우 효율이 떨어집니다.
		- 그래서 편향되지 않게 삽입과 삭제를 개선한 이진 탐색 트리를 자가균형트리라고 합니다.
		- 자가 균형 트리에는 AVL, Red Black 트리가 있습니다. 
	
	- 해시
		- 해시에 매핑하여 데이터를 저장하는 자료구조
		- 리스트는 O(N)만큼 걸리는 구조로 자료 검색에 아주 성능이 떨어지는 자료구조이다. 그래서 해시를 사용.
		- 해시는 삽입, 삭제, 조회가 모두 O(1)의 시간복잡도를 갖습니다.
		- key는 Hash Function을 통해 hash로 변경된 다음에, value와 매핑되어서 bucket에 저장되게 됩니다.
	
	- 해시 충돌 회피 방법
		- 해시에서 하나의 버킷에 여러개가 들어갈 때 그 충돌을 회피하는 방법으로, Open Addressing과 Chaining이 있습니다.
		- Open Addressing : 다른 해시 값에 저장하는 방법
		- Chaining : 해쉬 테이블이 원소 하나를 담는게 아니라, Linked List를 담는 방법
		
		


- 힙이란
	- 힙의 삽입, 삭제
	- 힙이 할수있는 것을 균형 이진 트리가 할수 있지않나?
- 이진 탐색 트리
	- 이진 탐색 트리 삽입, 탐색, 삭제
- 자가 균형 트리
	- AVL
	- Red Black Tree
- 해시
	- 충돌회피 방법
