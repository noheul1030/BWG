3. 데이터베이스
	- DBMS(DataBase Management System)
		- 데이터베이스 내 데이터에 접근하도록 도와주는 시스템
		예) 사용자 -> DBMS서버(MySQL, Oracle) -> 데이터
		
		- 질의처리기(Query Processor), 저장시스템(Storage System)
	
	- 트랜잭션 특징 ACID
		- 내가 작업해야하는 것들이 모두 한번에 처리되거나 처리되지 않아야 하는 작업들을 모아놓은 것을 트랜잭션이라 한다.
		- 데이터베이스의 무결성과 일관성을 위해서 트랜잭션은 4가지의 특징을 만족해야한다.
		
		* 특징 *
		- A : 원자성(Atomicity)
			- 트랜잭션의 작업이 부분적으로 실행되거나 중단되지 않는 것을 보장하는 것을 말함.
			- 즉, All or Noting의 개념으로서 작업 단위를 일부분만 실행하지 않는다는 것을 의미
		- C : 일관성(Consistency)
			- 트랜잭션이 성공적으로 완료되면 일관적인 DB상태를 유지하는 것
			- 여기서 말하는 일관성이란, 송금 예제에서 금액의 데이터 타입이 정수형인데 갑자기 문자열이 되지 않는 것을 말합니다.
		- I : 격리성(Isolation)
			- 트랜잭션 수행시 다른 트랜잭션의 작업이 기어들지 못하도록 보장하는 것을 말함.
			- 즉, 트랜잭션 끼리는 서로를 간섭할 수 없다.
		- D : 지속성(Durability)
			- 성공적으로 수행된 트랜잭션은 영원히 반영이 되는 것을 말함.
			- commit을 하면 현재 상태는 영원히 보장.
	
	- NOSQL
		- Not Only SQL의 약자로, SQL을 보완한다는 의미
		- 스키마? : 데이터를 저장하는 규칙
		* SQL 
			- RDBMS(관계형데이터베이스),엄격한 스키마 존재 O, 컬럼에 관계를 저장
		
		* NOSQL 
			- 스키마가 X, 데이터를 조회하고 삽입하는 속도가 빠름.
			- 그래서 대량의 분산데이터를 저장하는데 특화되어 있음.
	
	- 파티셔닝
		- 테이블을 컬럼 단위로 나누어 관리하는 기법
		- 스키마를 나누고 데이터가 따라 옮겨가는 것을 말한다.
		- 하나의 엔티티를 2개 이상으로 분리하는 작업
		- 장점 : update나 insert 같은 작업이 분산되어서 성능이 향상.
		- 단점 : 테이블간 join 비용이 증가, index를 별도로 파티셔닝 할 수 없다는 단점을 가지고 있다.
	- 샤딩
		- 테이블을 row 단위,가로 횡 단위로 분산하여 저장하는 방법
		- 같은 테이블 스키마를 가진 데이터를 다수의 데이터베이스에 분산하여 저장하는 방법
		- Shard Key를 어떻게 정의하느냐에 따라 데이터를 효율적으로 분산시키는 것이 결정됩니다.
			1. Hash Sharding
				- Shard Key : Database id를 Hashing 하여 결정합니다.
				- Hash 크기는 Cluster 안에 있는 Node 개수로 정하게 됩니다.
				- 데이터가 많아져서 Cluster를 확장해야 할 때에 전체의 규칙을 바꿔줘야하는 것이 단점
			2. Dynamic Sharding
				- Naming 그대로 Dynamic 으로 바꿀 수 있다.
				- Locator Service를 통해 Shard Key를 얻습니다.
				- 테이블의 구간 규칙을 정해서 사용
				- Cluster가 포함하는 Node 개수를 늘려 확장을 하기가 용이함.
				


- DBMS란?
	- DBMS 구조
	- 질의처리기 작동 순서
	- 옵티마이저
	- DB 저장 공간
	- DBMS Join 원리 종류
	- JDBC, ODBC차이
	- DDL, DML, DCL?
- Key
	- 인덱스
		- 클러스터드, 넌클러스터드 인덱스란?
		- 클러스터란?
	- 시퀀스
	- 뷰
	- 트리거
	- 무결성
		- 무결성 보장방법
	- 정규화
		- 정규형 필요 조건
		- 함수적 종속성
		- 반정규화
	- Anomaly
	- SQL Injection
- 파티셔닝이란?
	- 샤딩이란
	- 리플리케이션이란?
	- 클러스터링이란?
- 트랜잭션 특징 ACID
	- 트랜잭션 상태
	- 트랜잭션 격리 종류
	- 낮은 격리단계 선택시 발생 문제
- Persistence Layer란?
- UML
- MySQL 특징
- PostgreSQL 특징
- SQL vs NOSQL
	- CAP 이론
	- NoSQL 종류
	- NoSQL 사용경험
	- Redis란?
	- 카산드라 특징 
