7. 웹 WEB
	- 브라우저에 url치면 일어나는 일
		- 해당 도메인에 대한 IP주소(DNS) -> Http request 메세지 -> 프로토콜 스택 -> LAN -> 허브, 스위치, 라우터 
		  -> 프로바이더ISP -> pop -> 인터넷 핵심부 -> 고속라우터 -> 방화벽 -> 캐시 -> 웹서버 -> WAS 응답
		
		1. 브라우저에서 DNS 서버에서 도메인명으로 IP주소를 가져오게 됩니다.
		2. HTTP Request 메세지 작성
		3. OS의 프로토콜 스택에 메시지 전송을 의뢰
		4. 프로토콜 스택이 LAN에 제어정보를 붙인 패킷을 LAN 어댑터에 넘김.
		5. LAN 어댑터는 전기신호로 변환시켜 LAN 케이블로 송출.
		6. 송신한 패킷은 허브, 스위치, 라우터를 경유
		7. 프로바이더에게 전달
		8. 패킷은 수많은 엑세스 회선을 통해서 pop를 거쳐 인터넷 핵심부에 들어가게 된다.
		9. 많은 고속 라우터들 사이로 패킷이 상대방 서버까지 도달.
		10. 서버측의 LAN에 도착하게 되면 방화벽이 패킷을 검사.
		11. 이상이 없을 경우 캐시서버가 먼저 응답 데이터가 있는지 확인하게 된다.
		12. 없을 경우에는 웹서버에 전송.
		13. 패킷이 웹서버에 도착하면 이제 프로토콜 스택은 패킷을 추출, WAS에 전달.
		14. WAS는 응답 메시지를 만들어서 다시 클라이언트에게 보내게 된다.
		15. 위와 같은 방법대로 다시 클라이언트에게 전달.
		
	- 쿠키와 세션
		- HTTP는 상태와 연결에 대한 정보를 저장하지 않아, 이를 도와주는 것 
		- 쿠키
			- 사용자의 정보가 기록된 텍스트 파일.
			- 사용자의 브라우저에 저장, 통신할 때(HTTP)헤더에 포함되어서 전송.
			- 쿠키의 정보가 노출될 수 있기 때문에 보안에 취약하다는 특징이 있음.
		- 세션
			- 사용자의 정보를 서버에 저장.
			- 브라우저가 종료될 떄까지 유지.
			- 서버에 저장되기 때문에 보안이 강하다는 특징을 가지고 있다.
	
	- REST API, RESTful이란?
		- REST 기반으로 서비스 API를 구현한 것
		- REST라는 것은 자원(내가 요청할 건)의 표현(URI), 즉 이름으로부터 자원의 정보를 주고받는 것을 의미합니다.
		- 자원에 대한 행위는 HTTP Method로 표현한 것이 REST API 입니다.
		- HTTP Method(CRUD)
			- Create : Post
			- READ	 : Get
			- Update
			- Delete
		
		- RESTful
			- REST의 원리를 잘 따르는 시스템.
			- 자원을 URL로, 행위에 맞는 적절한 HTTP method를 사용한 것이 RESTful 한 메소드 입니다.
			- RESTful 하지 않은 경우의 예
				- CRUD 기능을 모두 POST 만으로 처리한 것을 RESTful 하지 않다고 할 수 있습니다.
		
		- HTTP 응답코드
			- 클라이언트에서 서버에 응답을 요청했을 때 받게 되는 메세지를 보지 않아도 알 수 있게 하는 것이 응답코드.
			
			- 100번대 : 조건부 응답, 요청을 받아서 처리중을 의미.
			- 200번대 : 성공. Successful Response. Request가 성공적으로 처리되었음을 의미.
			- 300번대 : Redirection, 사용자를 다른 곳으로 이동. 클라이언트를 지정된 위치로 이동.
			- 400번대 : 클라이언트의 오류, 보내는 사람이 요청을 잘못 보냈을 때. HTTP 요청이 잘못되거나 권한이 없을 때.
			- 500번대 : 서버의 오류. 서버가 요청을 제대로 수행하지 못할 때 발생.
			
		- HTTPS
			- 암호화 프로토콜을 사용하여 HTTP 통신을 안전하게 하는 프로토콜			
			- HTTP의 3가지 문제점
				1. 평문 통신을 해서 도청이 가능 (보안에 취약)
				2. 통신상대를 확인하지 않아서 위장이 가능 
				  (내가 보낼 때 상대방이 맞는지 확인하지 않고 보내기 때문에 이상한 곳으로 아이디 패스워드를 보낼 수 있음.)
				3. 상대방이 나한테 보낸 응답을 중간에 누군가가 수정할 수 있기 때문에 완전성이 보장이 안됨. 변조가 가능.
			- 이를 보안하기 위해서 사용하는 것이 HTTPS.
			- 구체적으로는 HTTP에서 통신하는 소켓을 암호화 프로토콜을 사용해서 TCP와 통신하도록 함.
			- 암호화 프로토콜을 사용함으로써 HTTPS는 암호화, 증명서, 변조를 방지할 수 있다.
			- 사용하는 암호화 프로토콜 : SSL, TLS





- 브라우저에서 URL치면 발생하는 일
- 쿠키, 세션
	- 쿠키 동작방식
	- 세션 동작방식
	- 쿠키와 세션의 차이
- 캐시
- URI, URL, URN에 대해서
- REST, REST API, RESTful 이란?
	- REST API  장점, 단점
- HTTP 1,2,3의 차이
- HTTP 응답코드
	- 301, 302 차이
	- 401, 403 차이
- HTTPS
	- SSL 동작방식
	- HSTS란
	- SSL Stripping이란?
- GET과 POST의 차이
- 검색엔진이 뭐에요
	- 웹 크롤러는?
- HTTP 멱등성
- 토큰 기반 인증 
	- JWT
	- OAuth
- CORS란?
	- CORS 해결방법
- JSON, XML의 차이
- MIME이란?
- AWS란?
