5. 자바
	- 자바 애플리케이션 실행 과정
		- 운영체제가 다르더라도 공통적으로 사용가능하게끔 운영체제 위에 짜여진 애플리케이션 -> JVM(자바 버츄얼 머신)
		- JAVA Source File(.java) -> JAVA Compiler(javac) -> JAVA Byte Code(.class)
		
		1. 컴파일러가 자바 소스를 바이트 코드로 변환합니다.
		2. Class Loader가 바이트 코드를 런타임 데이터 영역에 로드시킵니다.
		3. 로딩된 바이트 코드가 실행엔진에 의해서 실행되게 됩니다.
		
	- 자바 메모리 구조(Runtime Data Area)
		- 크게 5가지 영역으로 구분된다.
		- 스레드별 : PC Register, JVM Stack, Native Method
			- PC Register : 현재 실행중인 명령어를 가지고 있는다.
			- JVM Stack : 함수에 대한 정보, 매개변수, 지역변수, 리턴정보들이 저장.
			- Native Method : 자바 외부 언어로 작성된 코드들이 들어있다.
		- 공통 : Method Area, Heap
			- Heap : 런타임 중 생성되는 객체들이 동적으로 할당되는 곳.
					 사용자가 사용하면서 생긴 데이터가 저장되는 공간, 사용데이터가 동적으로 할당되는 곳.
			- Method Area : 클래스 별로 전역변수, 정적변수, 메소드 정보들이 저장되는 공간.
		
	- 가비지 컬렉션(GC)
		- JVM에서 자동으로 메모리를 관리해주는 모듈
		- Heap 메모리를 재활용하기 위해서 더 이상 참조되지 않는 객체들을 메모리에서 제거하는 모듈.
		- 개발자가 직접 메모리를 정리하지 않아도 되어서 개발 속도가 향상되는 장점이 있지만 Mark and Sweep 이라는 과정에서 
		  참조되지 않는 객체를 찾는 과정이 있는데, 이때 스레드가 잠깐 중된되며 성능이 떨어진다는 단점이 있습니다.
		  
		- 메모리가 꽉 찰 경우에 잠깐 실행을 멈추고 메모리들이 어디에서 참조되는지를 확인하고 참조되지 않으면 메모리 공간을 비움.
		- 잠깐 멈추고 안쓰고 있는 것을 찾는 과정을 Mark and Sweep 이라 한다.
	
	- 객체지향 프로그래밍
		- 현실 세계의 사물같은 객체를 만들고, 객체에서 필요한 특징을 뽑아 프로그래밍 수행.
		- 객체지향 프로그래밍에는 4가지의 특징이 있다.
			1. 추상화
				- 공통적인 특징들을 뽑아서 개념화 하는 것 
				예) 물, 콜라 -> 마시는것
			2. 캡슐화
				- 객체들 안에 숨겨야 할 정보들은 숨기고 내부에서는 잘 연결되도록, 외부와는 많이 의존, 결합하지 않도록 감싸는 것.
				- 정보 은닉을 통해 내부적으로 높은 응집도를 가지고 외부에서는 낮은 결합도를 가지는 것을 캡슐화 라고 한다.
			3. 상속성
				- A와 B에 겹치는 작업에 대해서 A를 B에 포함시켜 작업의 재사용을 용이하게 하는 것이 상속성이다.
			4. 다형성
				- 다양한 형태, 하나의 요청에 각각의 형태,객체를 다르게 해주는 것을 다형성이라 한다.
				
	- 추상클래스 vs 인터페이스
		- 추상클래스 : abstract로 지시자로 정의되며 추상메소드가 하나 이상 포함
			- 부모클래스를 자식클래스에서 상속받아서 재사용 하기 위해서 사용하는 것이 추상클래스 이다.
			- public abstract class Animal extends Creature{
				위와 같은 형태로 extends를 통해 부모의 클래스를 자식에서 상속받음.
		
		- 인터페이스 : interface 지시자로 정의하며 모든 메소드가 추상 메소드로 정의
			- 자바 8 이후 부터는 인터페이스에도 메소드가 구현이 가능해지며 점점 구분이 모호해져 가고 있다.
			- 모든 메서드가 추상 메서드로 정의되게 된다.
			- 인터페이스로 구현하면 같은 명의 메소드들을 모두 구현해야한다.
			- 인터페이스로 구현한 객체들은 모두 같은 동작을 할 수 있다! 라는 것을 보장하는 것이 인터페이스 이다.
			- public class Turtle implements Swimable{
				위와 같은 형태로 implements로 부모의 클래스를 상속받게 됨.
				
		- 추상클래스와 인터페이스의 차이는 그 존재의 목적에 있다.
			1. 추상클래스는 상속받아서 기능을 재활용하고 확장시키는데 목적이 있다.
			2. 인터페이스는 함수의 구현을 강제해서 구현한 객체들이 같은 동작을 하는것을 보장하는 것에 그 목적이 있다.




- 객체지향프로그래밍이란?
	- 객체지향 프로그래밍 4가지 특징
	- 객체지향 설계 5대 원칙
	- 추상 클래스와 인터페이스의 차이
	- 객체지향, 함수형의 차이
	- 오버로딩 오버라이딩
- 자바 애플리케이션, JVM 실행 과정
- 자바 메모리 구조
	- 클래스 로드 방법
	- 클래스 로드 과정
- 가비지 컬렉션이란?
	- 가비지 컬렉션 일어나는 과정
	- GC 모니터링이란
- 컬렉션 프레임워크
	- Vector와 ArrayList의 차이
	- HashSet, TreeSet, LinkedHashSet 차이
	- HashMap, LinkedHashMap, HashTable, TreeMap 차이
- Servlet 개념, 동작순서, 생명주기
- 정적변수와 전역변수의 차이
- 접근제어자에 대해 설명
	- 접근제어자 사용하는 이유
- 직렬화(Serialize)란?
- Wrapper Class
- String은 래퍼클래스인데 == 비교시 값 같게 나오는 이유
- 제네릭이란?
- final이란?
- 자바 8버전, 11버전의 특징과 차이점
