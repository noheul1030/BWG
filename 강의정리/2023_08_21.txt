< 2023.08.21 >
< 1교시 >
- 분석(데이터모델링은 여기) -> 설계 -> 개발 -> 테스트
- 요구공학
- 도메인 주도 설계 (DDD)

- 요구사항 이란?
	- "요구사항"의 여러가지 해석
		- 컴퓨터 프로그래밍이 탄생한 지 수십 년이 지난 지금도 소프트웨어 전문가들은 "요구사항"이 무엇인지 대해 여전히 격렬한 논쟁을 벌이고 있다고 한다.
			- 요구사항이란 "설계안을 도출하기 위한 모든 것"
			- 요구사항이란 무엇을 구현해야 하는가에 대한 명세.
			- 요구사항은 시스템이 동작하는 방법이나 시스템 속성 혹은 특성을 설명한 것.
			- 시스템 개발 프로세스의 제약조건이라고 볼 수 있다.
			
			- 비지니스 요구사항 : 제품 개발 조직이나 제품을 구매하는 고객의 고수준 비지니스 목표
			- 비지니스 규칙 	: 어떤 비즈니스 양상을 정의하거나 제약하는 정책이나 지침, 표준, 규정,
							  이 자체만으로도 소프트웨어 요구사항이면서 다양한 소프트웨어 요구사항의 근원이기도 하다.
			- 제약조건 : 개발자가 제품을 설계하거나 구현하며 선택이 필요할 때 이에 영향을 미치는 제약
			- 기능 : 사용자에게 가치를 제공하고 일련의 기능적 요구사항에 기술된 한 가지 이상의 논리적으로 연계된 시스템 기능
			- 기능적 요구사항 : 특정조건에서 발생하는 소프트웨어 시스템 동작에 대한 설명
			- 비기능적 요구사항 : 시스템이 꼭 제공해야 하는 속성이나 특징, 혹은 시스템이 고려해야 하는 제약조건에 대한 설명
			- 시스템 요구사항 : 소프트웨어로만 구성되거나 하드웨어와 같이 구성되는 등 다수의 서브시스템을 포함하는 제품의 최상위 요구사항
			- 사용자 요구사항 : 특정 사용자 클래스가 시스템을 통해 반드시 수행해야 하는 목표나 태스크, 혹은 원하는 제품 속성
		
		- 요구사항을 정의하는 것이냐? 명세하는 것이냐?
		- 정의 Definition or Development vs 명세 Specification
		- Business Analyst / Consultant vs 개발팀 설계자
		
		- 소프트웨어 요구사항 명세화
	
	- 요구사항의 중요성
		- 요구사항 정의의 의의
			- 무엇을 개발해야 하는가?를 결정
			- 소프트웨어 개발에 있어서, 출발점이자, 달성해야 하는 최종 목표
			- 소프트웨어 / 시스템의 범위 결정
			- 요구사항 중 기능목록은 개발리소스 목록의 원천이 됨
		
		- 프로젝트에 들어가게 되면 요구사항 정의부터 한다.
		- 제안요청(프로젝트) 진행절차
			1. 식별	2. 분석	3. 선정	4. 제안
			5. 수주	6. 계약	7. 수행	8. 사후
		
		- Legacy System
			- 예전에 개발되었지만 지금도 사용 중인 하드웨어나 소프트웨어. 
			  기존 시스템이 있는 상태에서 새롭게 시스템이 구축된다면 기존시스템이 레거시 시스템이 된다.
		- 대외기관 I/F(인터페이스)
		- COTS(Commercial, off-the-shelf)
		- 요구사항 정의는 기본적으로 문장.
		  따라서, 요구사항의 정의 참여자는 명확하게 문서화하는 기술을 갖추어야 함.
	
	- 요구사항의 검증
		1. 요구사항 정의
		2. 외부설계(데이터모델 설계)
		3. 개발 스프린트(내부설계 -> 개발 및 Unit테스트 -> 거래테스트)
		4. 결합테스트
		5. 통합테스트(여기까지가 잘 되어야지 open을 할 수 있다.)
		6. 인수테스트/교육(프로젝트가 끝난 후 고객사에 인수인계를 하고 빠짐)
		7. 컷오버(이행, 기공식 같은 개념, 프로젝트 오픈, 프로젝트 고 라이브)
		
		- 요구사항의 검증 V 모델
			- V 모델
				- 개발 프로세스에 따라, 각 개발단계에 대응하는 테스트단계를 도식화한 것
				- 설계단계가 잘 되었는지 검증 : Verfication Phase
				- 개발단계가 잘 되었는지 검증 : Validation Phase
				- 요구사항을 정의할 때 테스트케이스까지 같이 정의한다. 
				  그래야 개발할 때 누락되는 것을 상당부분 없앨 수 있다. -> V모델 방법론 
				- 요구사항에 대한 것이 얼마나 잘 만들어졌는지에 대한 검증
			
			- 개발 프로젝트의 해결 방식
				1. 문서화 및 합의
				2. 프로젝트 단계별 구체화
					- 마일 스톤
						마일스톤(milestone)이란 프로젝트 진행 과정에서 특정할 만한 건이나 표를 말한다. 
						예를 들어, 프로젝트 계약, 착수, 인력투입, 선금 수령, 중간보고, 감리, 종료, 잔금 수령 등 
						프로젝트 성공을 위해 반드시 거쳐야 하는 중요한 지점을 말한다.
				3. 프로토타이핑
					- 프로토 타입 : 내가 만들 화면을 PPT로 미리 그려보는 것(구상, 설계서)
				4. 요구사항 추적관리
					- 요구사항이 변경되는 것에 대한 추적관리
					- 변화되는 요구사항에 대한 더 잘 대응하는 기법이 IT에는 필요하다.
					- 유연한 설계가 필요하다.
				5. 솔루션 찾기
					- 오픈소스 등 내가 빨리 해결할만한 대안
				6. 패턴의 적용
					- 디자인 패턴 
				7. 테스팅
=========================================================================================================
< 2 교시 >
		
- MVC란?
	- MVC (모델-뷰-컨트롤러) 는 사용자 인터페이스, 데이터 및 논리 제어를 구현하는데 널리 사용되는 소프트웨어 디자인 패턴입니다. 
	- 소프트웨어의 비즈니스 로직과 화면을 구분하는데 중점을 두고 있습니다. 이러한 "관심사 분리" 는 더나은 업무의 분리와 향상된 관리를 제공합니다.
	
- Web서버와 WAS 의 차이?
	- 웹 서버(Web Server)
		-웹 서버란 HTTP 프로토콜을 기반으로 클라이언트가 웹 브라우저에서 어떠한 요청을 하면 그 요청을 받아 정적 컨텐츠를 제공하는 서버이다. 
		- 정적 컨텐츠란 단순 HTML 문서, CSS, 이미지, 파일 등 즉시 응답 가능한 컨텐츠이다. 
		- 이때 웹 서버가 정적 컨텐츠가 아닌 동적 컨텐츠를 요청받으면 WAS에게 해당 요청을 넘겨주고, 
		  WAS에서 처리한 결과를 클라이언트에게 전달하는 역할도 해준다. 
		- 이러한 웹 서버에는 Apache, NginX 등이 있다.
	- WAS(Web Application Server)
		- WAS란 DB 조회 혹은 다양한 로직 처리를 요구하는 동적 컨텐츠를 제공하기 위해 만들어진 Application 서버이다. 
		- HTTP 프로토콜을 기반으로 사용자 컴퓨터나 장치에 애플리케이션을 수행해주는 미들웨어로서, 주로 데이터베이스 서버와 같이 수행된다.
		- WAS는 JSP, Servlet 구동환경을 제공해주기 때문에 서블릿 컨테이너 혹은 웹 컨테이너로 불린다.
		- 이러한 WAS는 웹 서버의 기능들을 구조적으로 분리하여 처리하고자 하는 목적으로 제시되었다. 
		- 분산 트랜잭션, 보안, 메시징, 쓰레드 처리 등의 기능을 처리하는 분산 환경에서 사용된다. 
		- WAS는 프로그램 실행 환경과 DB 접속 기능을 제공하고, 여러 개의 트랜잭션을 관리 가능하다. 또한 비즈니스 로직을 수행할 수 있다
		- 이러한 WAS에는 Tomcat, JBoss, WebSphere 등이 있다. 
		
	웹 서버와 WAS를 분리해야 한다. 그 이유는 다음과 같다.
	
	1. 서버 부하 방지
		- WAS와 웹 서버는 분리하여 서버의 부하를 방지해야 한다. 
		- WAS는 DB 조회나 다양한 로직을 처리하고, 단순한 정적 컨텐츠는 웹 서버에서 처리해줘야 한다. 
		- 만약 정적 컨텐츠까지 WAS가 처리한다면 부하가 커지게 되고, 수행 속도가 느려질 것이다. 
	2. 보안 강화
		- SSL에 대한 암호화, 복호화 처리에 웹 서버를 사용 가능
	3. 여러 대의 WAS 연결 가능
		- 로드 밸런싱을 위해 웹 서버를 사용할 수 있다. 
		- 여러 개의 서버를 사용하는 대용량 웹 어플리케이션의 경우 웹 서버와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있다. 
	4. 여러 웹 어플리케이션 서비스 가능
		- 하나의 서버에서 PHP, JAVA 애플리케이션을 함께 사용할 수 있다. 
		
	이러한 이유로 웹 서버를 WAS 앞에 두고 필요한 WAS들을 웹 서버에 플러그인 형태로 설정하면 효율적인 분산 처리가 가능하다.	
	
- CIS 란?
	- c/s 클라이언트 서버 -> 2-Tier

- 웹 브라우저 <-----> 웹 어플리케이션 서버(WAS), 중간에 있어서 미들웨어라 한다. <-----> 서버 web 3-Tier
- web 형식은 다 3-Tier

=========================================================================================================	
< 3 교시 >
- 요구 공학(Requirements Engineering)
	- 정의
		- 요구사항의 획득, 분석, 명세, 검증 및 변경관리 등에 대한 제반 활동과 원칙.
		- 요구사항 생성 및 관리를 체계적, 반복적으로 수행
		- 시스템 요구사항 문서를 생성,검증,관리하기 위하여 수행되는 구조화된 활동의 집합
		- 요구사항 명세를 최종 산출물로 생성
	- 목적
		- 이해관계자 사이에 효과적인 통신수단을 제공 및 요구사항에 대한 공통 이해 설정
		- 요구사항 손실 방지 및 에러 감지로 불필요한 비용 절감
		- 구조화된 요구사항으로 요구사항 변경 추적을 가능하게 함
		- 프로젝트 비용 초과와 기간 지연 방지
		
- 요구사항 개발 프로세스 
	1. 도출 (Elicitation)
		- 요구사항 소스
		- 도출기법
	2. 분석 (Analysis)
		- 요구사항 분류
		- 개념 모델링
		- 기술구조 설계 및 요구사항 할당
		- 요구사항 협상
	3. 명세 (Specification)
		- 시스템 정의서
		- 시스템 요구사항 명세서
		- 소프트웨어 요구사항 명세서
	4. 확인 (Validation)
		- 검토
		- 프로토타이핑
		- 모델 검증
		- 인수 테스트
		
	- 요구사항 도출
		- 요구사항이 어디에 있고, 어떻게 수집할 것인가?
		- 이해관계자(Stakeholder) 식별
		- 개발 팀과 고객 사이의 관계 형성
	- 요구사항 분석
		- 요구사항들 간 상충되는 것을 해결
		- 소프트웨어의 범위 파악
		- 소프트웨어가 환경과 어떻게 상호 작용하는지 이해
		- 시스템 요구사항을 정제하여 소프트웨어 요구사항을 도출
		- 개념 모델링(Conceptual Modeling)
			- 문제 도메인의 엔티티(entity)들과 그들의 관계 및 종속성 식별
			- 데이터 모델(Data Model), 데이터 흐름 모델(Data Flow Model), 
			  유스케이스 다이어그램(Use Case Diagram), 
			  사용자 인터랙션(User Interactions) 등을 작성
		- UML(Unified Modeling Language)의 활용
			- 유스케이스 다이어그램, 구조 다이어그램(Structure Diagram), 행위 다이어그램(Behavior Diagram)
			- 그림으로 어떤 것을 구현해야하는지 직관적으로 표현해 놓은 것
	- 요구사항 명세
		- 체계적으로 검토, 평가, 승인될 수 있는 문서를 작성
		- 시스템 정의, 시스템 요구사항, 소프트웨어 요구사항 등을 작성
	- 요구사항 확인 
		- 분석가가 요구사항을 이해했는지 확인(Validation)이 필요, 테스트 케이스도 확인
		- 요구사항 문서가 회사의 표준에 적합하고 이해 가능하며, 일관성이 있고, 완전한지 검증(Verification) 하는 것이 중요
		- 이해관계자들이 문서를 검토해야 하며, 이 요구사항 정의 문서들에 대해 형상관리
		- 리소스가 요구사항에 할당되기 전에 문제를 파악하기 위하여 검증을 수행

- 요구사항의 분류
	- 기능적 요구사항
		- 사용자가 원하는 기능
			사용자의 요구를 빠진 것 없이 정확하게 도출하고, 도출된 기능을 요구 분석 명세서에 
			완전하고 일관성 있게 표현해야 하며, 시스템에도 전부 반영하여 사용자에게 100% 제공해야 한다.
		- 완전성(completeness)
			사용자가 원하는 모든 기능이 포함되어 있어야 한다
		- 일관성(consistency)
			요구사항들이 서로 간에 모순이 있어서는 안 된다
	- 기능 요구사항 정의서 
		- 기능 요구사항 정의서는 기능의 패턴으로 구분하여 작성
			- 채널서비스
			- 화면
			- 시스템 인터페이스
			- 배치작업
				- .Batch : 일괄 처리 작업(일정시간 모아서 처리)  <-> Online : 실시간 처리 작업				
				- 매일매일 정해진 시간에 하루동안 모았던 모든 정보를 카운트 하는 것이 일괄 처리.
			- 기타 중요 업무규칙
		- 각 기능 요구사항은 개발방법론 상의 후 공정인 외부설계의 단위와 연결된다.
		- 프로젝트 종료 시점까지 요구사항 추적관리의 형태로 추적되고 검증된다.

	- Fit / Gap 차이점 분석
		- 고객의 요구사항은 관심 특정 분야에만 집중된다.
		- 고객의 요구사항만으로 기능 요구사항을 정의하면, 계단이 없는 2층 건물을 짓는 실수를 범하게 된다.
		- 이것은 명백히 건축설계자의 오류이다.
		
		- 고객의 요구사항과 기능을 구현하는데에 필요한 기능요구사항의 차이점
		
- 작성요령
	- 기능 요구사항 기술(Specification)의 기술(Technique)
		-전제사항 작성하기
			- 기능 요구사항은 시스템의 제공하는 서비스를 기술하는 것이다. 
			- 해당 서비스를 제공하기 위한 타 솔루션의 의존관계 또는 제약사항을 기술한다.
			- 전제사항은 견적에 중대한 영향을 미칠 수 있으므로, 작성하는 개발팀이나 리뷰하는 현업 모두, 주의깊게 검토해야 한다.
			- 예) 고객이 제출한 본인확인서류 이미지와 발행기관, 발행번호를 보관한다.
				전제사항 : 본인확인서류의 이미지는 별도의 EDMS솔루션에 보관한다.
				전제사항 : 본인확인서류 이미지의 발행기관, 발행번호 추출은 별도 OCR솔루션을 의존한다.
		- 설계와 요구사항을 구분하기
			- 요구사항은 고객이 원하는 것을 기술한 것이고, 설계는 IT리소스의 책임할당에 대한 것이다.
			- 요구사항은 What, 설계는 How.
			- 그런데, What과 How는 문맥에 따라 달라지는 면이 있기 때문에 구분하기 어려운 면이 있다.
		- 개발팀을 짜증나게 하는 고객 
			- 설계에 간섭하거나 의사결정을 내리려고 할 때
		- 고객을 짜증나게 하는 개발팀
			- 설계 결정을 고객에게 미룰 때
		- 필요 이상으로 세부적으로 작성하지 않는다.
			- 요구사항은 외부설계와 상세설계를 진행하면서 더욱 세부적인 의사결정을 하게 된다.
			- 이후 단계에서 상세화할 것을 미리 적는 경우, 요구사항을 현행화하는데, 너무 많은 공수가 들게 된다. 
		- 기능요구사항의 업무 분류
			- 업무 영역을 기준으로 잘 분류된 기능 요구사항은 이 후 단계 메뉴체계나 Java Package를 구성하는데, 근간을 제공한다. 
			- 1레벨 – 어플리케이션
			- 2레벨 ~ 3레벨로 추가 업무분류
			
	- 냄새나는 요구사항 판별하기
		- 요구사항 = 테스트케이스
			- 테스트케이스를 쓸 수 없다면, 요구사항이 너무 추상적이거나 모호하다는 뜻이다.
		- 유비쿼터스 랭귀지(uml같은 시각적인 도표, 그림으로 잘 이해할수 있게 하는)를 준수하지 않았다.
		- 요구사항이 설계에 지나치게 간섭하거나 제약하고 있다. 
		- 상호 모순된 요구사항
		- 비효율적인 방식으로 기술되고 있다. 
			- 동일한 요구사항이 지나치게 중복되어 기술되어 있다.
			- 문장보다는 테이블(표)이 훨씬 명확하다.
			
-비 기능적인 요구사항
	- 기능성이 아닌 범주의 요구사항을 의미
	- 수행 가능한 환경, 품질, 제약 사항 등
	- 품질
		- 신뢰성(reliability) : 장애 없이 동작하는 시간의 비율
		- 성능(performance) : 원하는 조건(응답 시간, 데이터의 처리량 등)을 만족시키는 것
		- 보안성(security) : 접근 통제, 권한 관리 등
		- 안전성(safety) : 소프트웨어 오류로 인해 인명 등의 피해가 발생하지 않도록
		- 사용성(usability) : 혼란스러워 하거나 사용하는 순간에 고민하지 않게
	- 제약 사항
		- 자바 언어를 사용해 개발하고, CBD 개발 방법론을 적용해야 한다.
		- 레드햇 리눅스 엔터프라이즈 버전에서 실행해야 한다.
		- 윈도우 운영체제와 리눅스 운영체제에서 모두 실행할 수 있어야 한다.
	- 가용성
	- 변경용이성
	- 성능
	- 보안
	- 시험용이성
	- 사용편의성

=========================================================================================================		
	
< ppt 특강_역량교육3_금융IT 프로젝트 개론_v1.3 >
		
- DT(Digital Transformation)
	- 디지털 트랜스포메이션는 디지털의 이해 보다 변화에 대응하기 위한 ‘트랜스포멘이션’의 의지가 무엇보다 중요하다. 
	- ‘트랜스포메이션’은 사전적인 의미는 변환, 변신 이지만 또 다른 의미로 ‘형질전환’ 이라는 의미도 가지고 있다. 

- ITSM (IT Service Management)
	- 서비스들을 계획, 설계, 전달, 운영하기 위해, 단체에 의해 수행되는 활동 전반(정책에 의해 감독, 프로세스를 통해 조직 및 구성, 절차 지원)
	- Service들의 관리 체계

- CI / CD 란?
	- CI(COntinuous Integration) : "지속적인 통합"
		- 장점
			- 코드의 검증에 들어가는 시간이 줄어든다.
			- 개발 편의성이 증가한다.
			- 항상 테스트 코드를 통과한 코드만이 레포지토리에 올라가기 때문에, 좋은 코드 퀼리티를 유지할 수 있다.
			
	- CD(Continuous Delivery) : 
		- Continuous Delivery : 지속적인 제공, 수동적
		- Continuous Deployment : 지속적인 배포, 자동화
		
		- 장점 
			- 개발자는 배포보다는 개발에 더욱 신경 쓸 수 있도록 도와준다.
			- 개발자가 원클릭으로 수작업 없이 빌드, 테스트, 배포까지의 자동화를 할 수 있다.
		
	- CI / CD는 애플리케이션 개발 단계부터 배포 때 까지의 모든 단계를 자동화를 통해 좀더 효율적이고 빠르게 사용자에게 빈번히 배포할 수 있는 것.
	- CI / CD는 DevOps 엔지니어의 핵심 업무라고 불리운다. 
	
- DevOps 란?
	- DevOps는 소프트웨어 개발 및 IT 운영 팀의 작업을 결합하고 자동화함으로써 고품질의 소프트웨어를 보다 빠르게 제공.
	- DevOps는 근본적으로 더 우수한 품질의 소프트웨어를 더 신속하게 딜리버리하기 위한 소프트웨어 개발 프로세스이자 조직 문화적 변화를 가리킵니다. 
	  이를 위해 개발 팀과 IT 운영 팀의 활동을 자동화하고 통합합니다. 이 두 조직은 지금까지 개별적으로, 즉 각자의 사일로 내에서 작업하곤 했습니다.

	- 현실적으로 최상의 DevOps 프로세스 및 문화는 개발 및 운영의 영역에 머무르지 않고 모든 애플리케이션 이해 관계자, 
	  이를테면 플랫폼/인프라 엔지니어링, 보안, 컴플라이언스, 거버넌스, 위험 관리, LOB(line-of-business), 최종 사용자, 고객 등의 
	  의견을 소프트웨어 개발 라이프사이클에 반영합니다.  

	- DevOps는 수 개월 또는 수 년마다의 거대한 애플리케이션 전체 코드 릴리스에서부터 매일 또는 하루에 몇 번씩 빈번하게 릴리스되는 
	  반복적인 작은 특성 또는 기능적 업데이트에 이르기까지 과거 20년이 넘는 동안의 소프트웨어 딜리버리 사이클의 진화의 현재 상태를 나타냅니다.

	- 궁극적으로, DevOps는 빈번하고 혁신적인 새로운 기능과 중단 없는 성능 및 가용성에 대한 소프트웨어 사용자의 끊임없이 증가하는 요구사항을 충족시키는 것
	
- ISO 란?
	- 조직내 품질, 생산, 환경 부서에서 근무하시거나 사진을 좋아하는 사람들이라면 한번쯤은 들어보셨을 ISO란 명칭에 
	  그 뜻이 포함되어있듯이 국제적인 표준과 관련된 약속을 제정하는 기관