< 2023.08.17 >

- 관계(Relationship)
	- 엔티티 간에 존재하는 상호 연관성을 "Cardinality"(경우의 수)와 "Relationship Name" 으로 표기.	
	- 행위에 의한 관계
		* 금융에서는 모든게 계약으로 통한다. *
		- 고객 : 신규한다. -> 계약 : 신규된다.
		- 신규한다 신규된다는 서로 상반된 표현.
	- 소유에 의한 관계 
		- 상품 : 갖는다 -> 조건 : 속한다.
		- 물건의 종류를 "Cardinality"(경우의 수) 라고 한다.
	- 데이터의 관점에서 행동이나 소유 관계에 의해서 종속이 정의된다.
	
	- 관계는 업무규칙(Business Rule)을 기술.
		- 공동명의라는 것은 두사람을 하나로 묶어서 설명한다.
		- 계좌라는 입장에서는 어떠한 특정 한명만을 가진다.
	- 엔티티의 그림 설명
		- 1 대 N의 그림을 설명할 때 N 쪽으로 까마귀 발톱을 향하게 한다.
	- 관계는 데이터상으로 관리대상이 되는 관계를 의미한다.
	- 두 엔티티 간의 관꼐는 2개 이상일 수 있다.

- 관계명(Relationship Name)
	- 두 엔티티 사이의 관계는 선으로 표시
	- 관계선의 좌우, 상하에 관계명을 기록(시계방향으로 기록)
	
	- 관계명 명명규칙
		- 애매한 동사는 사용 x, 현재형으로 표현, 명확하게 표현

- 관계의 기수(경우의 수)
	- 기수(Cardinality)의 발생 유형
	- 최대 기수 3가지 유형
		: 두개의 엔티티 간 관계에서, 한 엔티티의 한 어커런스를 기준으로 상대 엔티티의 관계 된 어컬너스가 최대로 몇개까지 있을 수 있는가
	- 최소 기수 3가지 유형
		: 두개의 엔티티 간 관계에서 , 한 엔티티의 한 어커런스를 기준으로 상대 엔티티의 관계된 어커런스가 적어도 몇개까지 있을 수 있는가
		
		- 0 : 발생할 수도 있고 발생 안할 수도 있는 경우(Optional)
		- 1이상 : 꼬 발생해야 하는 경우(Mandatory)

- 관계검증1 : 중복제거
	- 원형관계(Circular Relationship) 제거
	- 사슬관계(Chain Relation) 제거
- 관계검증2 : M : N 관계 단순화
	- 관계를 별도 엔티티로 분리 : 숨겨진 정보로부터 연관 엔티티 추출
	- 다대다(N:N) 관계는 나빠!:-( 엔티티를 정규화해서 풀어줘야되!
- 관계검증3 : 1:1 관계정제(1:1관계는 테이블이 존재할 필요가 없다)
	- 데이터 모델링 과정에서 엔티티 간의 관계가 1:1로 대응되었다는 사실은 해당 엔티티들의 
	  기본키가 동일하다를 의미하며 1:1 관계를 가진 모델은 3가지 방법으로 표현할 수 있다.
	  
	1. 하나로 통합
		- Mandatory 관계
		- 기본키가 동일
		- 대부분의 속성과 관계가 동일
	2. 그대로 유지
		- Optional 관계이ㅏ면서 대부분의 속성 및 관계가 상이한 경우
		- 대응되는 속성이 값이 서로 상이한 경우
	3. 새로운 Super Type 엔티티 추가
		- 기본키가 동일하고 속성의 일부만 상이한 경우

- 관계별 엔티티 종류
	- 관계를 기준으로 한 엔티티 종류
		1. 기본형 엔티티(Fundamental Entiry)
		2. 속성형 엔티티(Attributive Entiry)
		3. 관련형 엔티티(Associative Entiry)

- 속성(Attribute)
	- 엔티티가 관리해야 되는 데이터 항목으로 더 이상 분리될 수 없는 최소의 데이터 보관 단위
	- 향후 물리 데이터 모델링 작업을 통하여 컬럼으로 변환
	
	- 속성의 명명규칙
		- "수식어 + 도메인 명" 형식을 사용하여 표준화 
			예) 데이터 항목 이름이 다르고 의미가 같은 경우 : 계좌개설일, 계좌신규일
			   데이터 항목 이름이 같고 의미가 다른 경우  : 일자(계좌신규일, 계좌해지일) 
			   
	- 속성 타입(Attribute Type)
		- 근본적으로 속성과 같은 의미
		- 엔티티가 갖는 속성의 유형을 의미함
		- 테이블/타이틀 : 엔티티 타입, 칼럼 : 속성타입, 칼럼값 : 엔티티 인스턴스
	
	- 속성 인스턴스(Attribute Instance)
		- 속성 타입의 값(Value)을 의미 함
	
	- 도메인(Domain)
		- 어떤 한 속성에 허용되는 업무적을호 의미있는 인스턴스 값의 집합
		- 속성이 가질 수 있는 값에 대한 업무적 제약요건으로부터 파악된 특성
		- 속성에 대한 데이터 Type과 크기, 제약사항을 지정한 것
			- 모든 업무영역에서 같은 도메인 집합을 사용
		- 도메인의 활용(중요성)
			- 속성 값의 비교 기준
			- 공통 검증 규칙
		- 도메인의 종류
			- 열거형 도메인 : 코드와 같이 인스턴스 값이 정해져 있다. 개수가 한정되어 있는것 
			- 제약형 도메인 : 인스턴스 값이 하한가와 상한가와 같이 값의 범주가 정해져 있으나 특정한 값을 정할 수 없고 
						 개수도 제한이 없는 것
		-도메인의 구성요소
			- 도메인명, 데이터 타입, 자릿수, 인스턴스 기술서(열거형 도메인 경우)
			
	- 속성 배치1
		- 기본키에 종속되는 속성을 해당 엔티티에 배치
		- 가능한 범위 내에서 부모 엔티티 쪽으로 배치
		- 속성이 여러 개의 값을 가질 수 있는 경우, 새로운 자식 엔티티를 만들어 자식 엔티티의 속성으로 배치
	- 속성 배치2
		- 관계를 구체화 시켜주는 속성이 존재할 경우 관계를 엔티티로 전환시켜 해당 속성 배치
	- 속성 배치3
		- Super Type(추상클래스) 엔티티, Sub Type 엔티티 내의 속성 배치
			- Super Type 엔티티에 Sub Type 엔티티의 구분항목을 속성으로 등록
			- Sub Type 엔티티 모두에 포함되는 속성을 Super Type 엔티티로 이동
		- 데이터를 정규화(찢) 하면 할 수록 모델이 안정화 된다.
			-> 한번만 잘 만들어 놓으면 나중에는 유지보수가 쉬워진다.
			-> NULL 값이 없어진다.
	
	
- 식별자(Key)
	- 식별자란 한 엔티티 내에서 각각의 어커런스를 유일하게 구분할 수 있는 단일 속성 또는 속성 그룹을 말함
	- 관련 용어
		1. 후보키(Candidate Key)
			: 엔티티 내에서 각각의 어커런스를 유일하게 구분할 수 있는 속성으로 하나 또는 하나 이상의 속성으로 구성됨
			  즉 기본키가 될 수 있는 후보 속성 임
			  예) 주민등록번호
				
		2. 기본키(Primary Key), 주요키, 일차키
			: 어느 엔티티 어커런스를 식별하기 위한 속성을 의미 함
			< 조건 > 
				- 유일하게 구분이 되어야함(Unique)
				- 반드시 데이터 값이 존재해야 함(Not Null)
				- 가능하면 변하지 않아야 함(Never Change)
				- 가능하면 업무적으로 활용도가 높은 것으로 정의하여야 함
				- 가능하면 길이가 짧은 것을 선정하여야 함
				예) 사번등을 Primary Key로 지정, 이름은 중복(동명이인)이 있을 수 있어서 지정안함.
				
		3. 대체키(Alternate Key)
			: 대체키는 후보키 중에서 기본키로 선정되지 않은 속성을 말함
			  즉, Primary Key 이외에 엔티티 인스턴스를 Unique하게 식별하는 Key임
			  
		4. 복합키(Concatenate Key), 연결키
			: 2개 이상의 속성으로 Primary Key를 구성한 Key
			예) 고객번호 + 주문번호 
		5. 외부키(Foreign Key)
			: 어떤 엔티티 A가 다른 엔티티 B와 관계를 갖는 경우, B 엔티티와 관계때문에 속성으로 갖게 되는 
			  B 엔티티의 Primary Key를 말 함.
		6. 합성키(Compound Key)
			: 엔티티와 엔티티의 관계가 Many to Many 관계일 때 그 관계를 나타내는 엔티티의 Key
			예) 서로 다른 PK를 합성, 부서ID + 프로젝트NO

- 주제영역(Subject Area)
	- 엔티티를 도출하고 관리하는 단위영역
- 표현방법(Notation)
	- ER 모델의 표기법
		- ER 모델의 표기법은 다양하고, 모델링 도구 업체별로 다름
		
	
	
			
	